{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","value","done","this","TodoList","list","remove","changeState","class","filter","item","map","i","Todo","todoItem","key","v","useState","setValue","input","useRef","checked","onClick","type","ref","onChange","text","current","change","App","todoList","setTodoList","createInput","copyListAndRemove","new_list","index","indexOf","splice","window","confirm","helper_list","new_todo","Object","assign","className","src","location","origin","alt","href","placeholder","required","trim","new_item","alert","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3b7e88c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// http://localhost:3000/\n\nimport React, { useState, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// data handling\nclass TodoItem {\n  constructor(value, done) {\n    this.value = value;\n    this.done = done;\n  }\n}\n\nfunction App() {\n  // starts with an empty array as default and loops over as new items are added.\n  const [todoList, setTodoList] = useState([]);\n\n  const createInput = useRef(null);\n\n  //{current:element} = useRef(null)\n\n  // method to add a create item\n  const create = () => {\n    // refactor below later\n    const input = createInput.current;\n    if (input.value.trim()) {\n      const new_item = new TodoItem(input.value, false);\n      input.value = \"\";\n      setTodoList([...todoList, new_item]);\n    } else {\n      alert(\"Do add something!\");\n    }\n  };\n\n  // make a brand new list without the specific item, and over-write old one when time is ready.\n  const copyListAndRemove = (list, item) => {\n    const new_list = [...list];\n    const index = new_list.indexOf(item);\n    new_list.splice(index, 1);\n    return new_list;\n  };\n\n  // total removal from the whole list\n  const remove = (todoItem) => {\n    if (window.confirm(\"Sure you wanna delete item?\")) {\n      const helper_list = copyListAndRemove(todoList, todoItem);\n      setTodoList(helper_list);\n    }\n  };\n\n  // we only have 1 list\n  // change state of specific todo-item via clicking the checkbox\n  const changeState = (todoItem) => {\n    const new_todo = {};\n    Object.assign(new_todo, todoItem);\n    new_todo.done = !todoItem.done;\n    const helper_list = copyListAndRemove(todoList, todoItem);\n    setTodoList([...helper_list, new_todo]);\n  };\n\n  /*  const save = (todoItem, new_text) => {\n    const helper_list = copyListAndRemove(todoList, todoItem);\n    const new_todo = new TodoItem(new_text, todoItem.done);\n    setTodoList([...helper_list, new_todo]);\n  };*/\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"nav-container\">\n          <h1>\n            <img\n              className=\"header-logo\"\n              // src=\"/img/clever_logo.png\"\n              src={window.location.origin + \"/img/clever_logo.png\"}\n              alt=\"logo\"\n            />\n\n            {/* <img src={require(\"../img/clever_logo.png\")} alt=\"logo\" /> */}\n            {/* <img src=\"http://localhost:3000/img/clever_logo.png\" alt=\"logo\" /> */}\n            {/* <img src=\"/src/img/myImage.png\" alt=\"logo\" /> */}\n\n            <a href=\"/\">Clever</a>\n          </h1>\n        </div>\n      </header>\n      <div className=\"main\">\n        <div className=\"create\">\n          <h1>New To-do</h1>\n          <input ref={createInput} placeholder=\"What to do next?\" required />\n          <button onClick={create}>Create</button>\n        </div>\n        <div>\n          <h1>To-Do's</h1>\n          <TodoList\n            done={false}\n            list={todoList}\n            remove={remove}\n            changeState={changeState}\n          />\n        </div>\n        <div>\n          <h1>Done</h1>\n          <TodoList\n            done={true}\n            list={todoList}\n            remove={remove}\n            changeState={changeState}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoList({ list, done, remove, changeState }) {\n  return (\n    <ul class=\"entries\">\n      {list\n        .filter((item) => item.done === done)\n        .map((item, i) => {\n          return (\n            <Todo\n              todoItem={item}\n              remove={remove}\n              changeState={changeState}\n              key={i}\n            />\n          );\n        })}\n    </ul>\n  );\n}\n\nfunction Todo({ todoItem, remove, changeState }) {\n  // saved into an item after created.\n  const v = todoItem.value + \"\";\n  const [value, setValue] = useState(v);\n\n  // takes care of input: document.querySelector(\"input\")\n  const input = useRef(null);\n\n  const change = () => {\n    const text = input.current.value;\n    setValue(text);\n    todoItem.value = text;\n  };\n\n  return (\n    <li>\n      <input\n        checked={todoItem.done}\n        onClick={() => changeState(todoItem)}\n        type=\"checkbox\"\n      />\n      <input ref={input} value={value} onChange={() => change()} type=\"text\" />\n      <button onClick={() => remove(todoItem)}>remove</button>\n    </li>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}