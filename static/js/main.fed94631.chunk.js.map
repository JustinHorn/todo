{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","value","done","this","Todo","type","TodoList","list","class","filter","item","map","i","key","App","useState","todoList","setTodoList","className","src","alt","href","id","placeholder","required","onClick","input","document","getElementById","trim","new_item","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,gKCmDrCC,EACJ,WAAYC,EAAOC,GAAO,oBACxBC,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,GAIhB,SAASE,EAAT,GAA0B,IAAVH,EAAS,EAATA,MACd,OACE,4BACE,2BAAOI,KAAK,aACZ,2BAAOA,KAAK,OAAOJ,MAAOA,IAF5B,IAEsC,2CAK1C,SAASK,EAAT,GAAmC,IAAfC,EAAc,EAAdA,KAAML,EAAQ,EAARA,KACxB,OACE,wBAAIM,MAAM,WACPD,EACEE,QAAO,SAACC,GAAD,OAAUA,EAAKR,OAASA,KAC/BS,KAAI,SAACD,EAAME,GACV,OAAO,kBAACR,EAAD,CAAMH,MAAOS,EAAKT,MAAOY,IAAKD,QAMhCE,MA1Ef,WAAe,MAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,KAiBb,OACE,yBAAKC,UAAU,OACb,gCACE,yBAAKA,UAAU,iBACb,4BACE,yBAAKA,UAAU,OAAOC,IAAI,iBAAiBC,IAAI,SAC/C,uBAAGC,KAAK,KAAR,aAIN,yBAAKH,UAAU,QACb,yBAAKA,UAAU,UACb,yCACA,2BAAOI,GAAG,WAAWC,YAAY,mBAAmBC,UAAQ,IAC5D,4BAAQC,QA1BD,WAEb,IAAMC,EAAQC,SAASC,eAAe,YACtC,GAAIF,EAAMzB,MAAM4B,OAAQ,CACtB,IAAMC,EAAW,IAAI9B,EAAS0B,EAAMzB,OAAO,GAC3CyB,EAAMzB,MAAQ,GACdgB,EAAY,GAAD,mBAAKD,GAAL,CAAec,UAE1BC,MAAM,uBAkBF,WAEF,6BACE,uCACA,kBAACzB,EAAD,CAAUJ,MAAM,EAAOK,KAAMS,KAE/B,6BACE,oCACA,kBAACV,EAAD,CAAUJ,MAAM,EAAMK,KAAMS,QChClBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASC,eAAe,SDyHpB,kBAAmBY,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fed94631.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { findByPlaceholderText } from \"@testing-library/react\";\n\nfunction App() {\n  // starts with an empty array as default and loops over as new items are added.\n  const [todoList, setTodoList] = useState([]);\n\n  // method to add a create item\n  const create = () => {\n    // refactor below later\n    const input = document.getElementById(\"whatToDo\");\n    if (input.value.trim()) {\n      const new_item = new TodoItem(input.value, false);\n      input.value = \"\";\n      setTodoList([...todoList, new_item]);\n    } else {\n      alert(\"Do add something!\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"nav-container\">\n          <h1>\n            <img className=\"logo\" src=\"img/clever.png\" alt=\"logo\" />\n            <a href=\"/\">Clever</a>\n          </h1>\n        </div>\n      </header>\n      <div className=\"main\">\n        <div className=\"create\">\n          <h1>New To-do</h1>\n          <input id=\"whatToDo\" placeholder=\"What to do next?\" required />\n          <button onClick={create}>Create</button>\n        </div>\n        <div>\n          <h1>To-Do's</h1>\n          <TodoList done={false} list={todoList} />\n        </div>\n        <div>\n          <h1>Done</h1>\n          <TodoList done={true} list={todoList} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nclass TodoItem {\n  constructor(value, done) {\n    this.value = value;\n    this.done = done;\n  }\n}\n\nfunction Todo({ value }) {\n  return (\n    <li>\n      <input type=\"checkbox\" />\n      <input type=\"text\" value={value} /> <button>remove</button>\n    </li>\n  );\n}\n\nfunction TodoList({ list, done }) {\n  return (\n    <ul class=\"entries\">\n      {list\n        .filter((item) => item.done === done)\n        .map((item, i) => {\n          return <Todo value={item.value} key={i} />;\n        })}\n    </ul>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}